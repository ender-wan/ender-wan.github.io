<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: http | Ender's Blog]]></title>
  <link href="http://endwan.com/blog/categories/http/atom.xml" rel="self"/>
  <link href="http://endwan.com/"/>
  <updated>2017-08-24T14:37:06+08:00</updated>
  <id>http://endwan.com/</id>
  <author>
    <name><![CDATA[Ender Wan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用endless实现http server自更新]]></title>
    <link href="http://endwan.com/blog/2017/08/11/li-yong-endlessshi-xian-http-serverzi-geng-xin/"/>
    <updated>2017-08-11T01:58:50+08:00</updated>
    <id>http://endwan.com/blog/2017/08/11/li-yong-endlessshi-xian-http-serverzi-geng-xin</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fvbock/endless">Endless</a>可以为go http server提供不停机重启的能力，很容易集成到自己的web service里面，只需要用它提供的ListenAndServe就好了。
<code>
err := endless.ListenAndServe("localhost:4242", handler)
</code></p>

<p>不停机重启的原理大概是通过接收SIGHUP信号，用exec再启动一个自己并将fd传过去，继续监听然后accept连接。父进程不再接收新的连接，等到处理完所有旧的连接或者设置一段时间超时之后自己终止。</p>

<p>利用endless的特性我们就可以设计出一个自更新的解决方案，无论是通过定时还是提供一个api去触发更新操作。一旦触发更新，就去配置服务器上查询是否有比自身更新的版本，有的话就先将自身备份，然后下载最新版本替换掉自身，最后自己给自己发送SIGHUP信号实现自更新。</p>

<p>当然这其中还会涉及一些其他细节需要处理，比如数据库结构、配置有变化等。</p>
]]></content>
  </entry>
  
</feed>
