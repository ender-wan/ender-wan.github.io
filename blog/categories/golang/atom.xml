<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Ender's Blog]]></title>
  <link href="http://endwan.com/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://endwan.com/"/>
  <updated>2017-08-15T10:29:53+08:00</updated>
  <id>http://endwan.com/</id>
  <author>
    <name><![CDATA[Ender Wan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用endless实现http server自更新]]></title>
    <link href="http://endwan.com/blog/2017/08/11/li-yong-endlessshi-xian-http-serverzi-geng-xin/"/>
    <updated>2017-08-11T01:58:50+08:00</updated>
    <id>http://endwan.com/blog/2017/08/11/li-yong-endlessshi-xian-http-serverzi-geng-xin</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fvbock/endless">Endless</a>可以为go http server提供不停机重启的能力，很容易集成到自己的web service里面，只需要用它提供的ListenAndServe就好了。
<code>
err := endless.ListenAndServe("localhost:4242", handler)
</code></p>

<p>不停机重启的原理大概是通过接收SIGHUP信号，用exec再启动一个自己并将fd传过去，继续监听然后accept连接。父进程不再接收新的连接，等到处理完所有旧的连接或者设置一段时间超时之后自己终止。</p>

<p>利用endless的特性我们就可以设计出一个自更新的解决方案，无论是通过定时还是提供一个api去触发更新操作。一旦触发更新，就去配置服务器上查询是否有比自身更新的版本，有的话就先将自身备份，然后下载最新版本替换掉自身，最后自己给自己发送SIGHUP信号实现自更新。</p>

<p>当然这其中还会涉及一些其他细节需要处理，比如数据库结构、配置有变化等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang实时接收通过exec启动程序的标准输出]]></title>
    <link href="http://endwan.com/blog/2017/08/11/golangshi-shi-jie-shou-tong-guo-execqi-dong-cheng-xu-de-biao-zhun-shu-chu/"/>
    <updated>2017-08-11T01:57:30+08:00</updated>
    <id>http://endwan.com/blog/2017/08/11/golangshi-shi-jie-shou-tong-guo-execqi-dong-cheng-xu-de-biao-zhun-shu-chu</id>
    <content type="html"><![CDATA[<p>最近在go里面用exec启动另外一个程序并获取它的stdout时出现了一个比较奇怪的问题。</p>

<p>stdpipe里的数据不是按行传过来，而是过了很久才会刷一大批数据出来，应该是其中存在某种缓冲机制。</p>

<p>跟踪了go标准库的代码没有发现会导致这种现象，查看了管道的缓冲机制好像也没问题，最后查到应该是跟该程序的缓冲io相关.</p>

<p>附上代码, 例子里运行的ping不会出现上面提到的问题
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmd := exec.Command(&ldquo;ping&rdquo;)
</span><span class='line'>out, err := cmd.StdoutPipe()
</span><span class='line'>if err != nil {
</span><span class='line'>    ewlog.Error(err)
</span><span class='line'>    return err
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;err = cmd.Start()
</span><span class='line'>if err != nil {
</span><span class='line'>    ewlog.Error(err)
</span><span class='line'>    return err
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;scanner := bufio.NewScanner(out)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for scanner.Scan() {
</span><span class='line'>    line := scanner.Text()
</span><span class='line'>    ewlog.Debug(line)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
